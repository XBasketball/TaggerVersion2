

st.set_page_config(page_title="StFx Mens Basketball Tagger", layout="wide")

# ---------------------------
# Roster (EDIT THIS LIST)
# ---------------------------
ROSTER = [
    "Player 1", "Player 2", "Player 3", "Player 4", "Player 5",
    "Player 6", "Player 7", "Player 8", "Player 9", "Player 10",
    "Player 11", "Player 12"
]

# ---------------------------
# Session State & Utilities
# ---------------------------
def init_state():
    st.session_state.setdefault("plays", [])
    st.session_state.setdefault("log", [])
    st.session_state.setdefault("selected_play", None)
    st.session_state.setdefault("opponent", "")
    st.session_state.setdefault("game_date", date.today())
    st.session_state.setdefault("quarter", "")
    st.session_state.setdefault("new_play", "")
    st.session_state.setdefault("selected_player", ROSTER[0] if ROSTER else "")
    st.session_state.setdefault("q_minutes", 10)
    st.session_state.setdefault("ot_minutes", 5)
    st.session_state.setdefault("clock_running", False)
    st.session_state.setdefault("clock_elapsed", 0.0)
    st.session_state.setdefault("clock_started_at", None)

def safe_filename(s: str) -> str:
    s = s.strip().replace(" ", "_")
    s = re.sub(r"[^A-Za-z0-9_\-\.]", "", s)
    return s

def points_from_result(result: str) -> int:
    return {"Made 2": 2, "Made 3": 3, "Missed 2": 0, "Missed 3": 0, "Foul": 0}.get(result, 0)

def _period_duration_seconds() -> int:
    q = st.session_state["quarter"]
    minutes = st.session_state["ot_minutes"] if q == "OT" else st.session_state["q_minutes"]
    try:
        minutes = int(minutes)
    except Exception:
        minutes = 10
    return max(0, minutes) * 60

def _effective_elapsed_seconds() -> float:
    elapsed = st.session_state["clock_elapsed"]
    if st.session_state["clock_running"] and st.session_state["clock_started_at"] is not None:
        elapsed += (time.monotonic() - st.session_state["clock_started_at"])
    return max(0.0, min(elapsed, float(_period_duration_seconds())))

def current_clock_remaining() -> int:
    total = _period_duration_seconds()
    elapsed = _effective_elapsed_seconds()
    remaining = int(round(total - elapsed))
    return max(0, remaining)

def format_mmss(seconds: int) -> str:
    m = seconds // 60
    s = seconds % 60
    return f"{m:01d}:{s:02d}"

def start_clock():
    if not st.session_state["clock_running"]:
        st.session_state["clock_started_at"] = time.monotonic()
        st.session_state["clock_running"] = True

def stop_clock():
    if st.session_state["clock_running"]:
        if st.session_state["clock_started_at"] is not None:
            st.session_state["clock_elapsed"] += (time.monotonic() - st.session_state["clock_started_at"])
        st.session_state["clock_started_at"] = None
        st.session_state["clock_running"] = False

def reset_clock_to_full():
    st.session_state["clock_running"] = False
    st.session_state["clock_started_at"] = None
    st.session_state["clock_elapsed"] = 0.0

def set_clock_from_mmss(mm: int, ss: int):
    total = _period_duration_seconds()
    remaining = max(0, min(mm * 60 + ss, total))
    st.session_state["clock_running"] = False
    st.session_state["clock_started_at"] = None
    st.session_state["clock_elapsed"] = float(total - remaining)

def add_log(play: str, result: str):
    clock_str = format_mmss(current_clock_remaining())
    st.session_state["log"].append({
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "opponent": st.session_state["opponent"],
        "game_date": str(st.session_state["game_date"]),
        "quarter": st.session_state["quarter"],
        "clock": clock_str,
        "play": play,
        "result": result,
        "player": st.session_state["selected_player"],
        "points": points_from_result(result),
    })

def compute_metrics(log_df: pd.DataFrame) -> pd.DataFrame:
    if log_df.empty:
        return pd.DataFrame(columns=["Play", "Attempts", "Points", "PPP", "Frequency", "Success Rate"])
    attempts = log_df.groupby("play").size().rename("Attempts")
    points = log_df.groupby("play")["points"].sum().rename("Points")
    metrics = pd.concat([attempts, points], axis=1).reset_index().rename(columns={"play": "Play"})
    metrics["PPP"] = metrics["Points"] / metrics["Attempts"]
    total_attempts = metrics["Attempts"].sum()
    metrics["Frequency"] = metrics["Attempts"] / (total_attempts if total_attempts else 1)
    made_mask = log_df["result"].isin(["Made 2", "Made 3"])
    att_mask = log_df["result"].isin(["Made 2", "Made 3", "Missed 2", "Missed 3"])
    made_counts = log_df[made_mask].groupby("play").size()
    shot_attempts = log_df[att_mask].groupby("play").size()

    def success_rate(play_name):
        made = int(made_counts.get(play_name, 0))
        atts = int(shot_attempts.get(play_name, 0))
        return (made / atts) if atts else 0.0

    metrics["Success Rate"] = metrics["Play"].map(success_rate)
    metrics = metrics.sort_values(by=["PPP", "Attempts"], ascending=[False, False]).reset_index(drop=True)
    return metrics

init_state()

# Sidebar
st.sidebar.header("Game Setup")
st.session_state["opponent"] = st.sidebar.text_input("Opponent", value=st.session_state["opponent"])
st.session_state["game_date"] = st.sidebar.date_input("Game Date", value=st.session_state["game_date"])
quarters = ["", "1", "2", "3", "4", "OT"]
q_index = quarters.index(st.session_state["quarter"]) if st.session_state["quarter"] in quarters else 0
new_q = st.sidebar.selectbox("Quarter", quarters, index=q_index)

if new_q != st.session_state["quarter"]:
    st.session_state["quarter"] = new_q
    reset_clock_to_full()

ready_to_tag = bool(st.session_state["opponent"] and st.session_state["game_date"] and st.session_state["quarter"])

st.sidebar.markdown("---")
st.sidebar.subheader("Clock Settings")
st.session_state["q_minutes"] = st.sidebar.number_input("Quarter Length (min)", min_value=1, max_value=20, value=int(st.session_state["q_minutes"]))
st.session_state["ot_minutes"] = st.sidebar.number_input("OT Length (min)", min_value=1, max_value=20, value=int(st.session_state["ot_minutes"]))
if st.sidebar.button("Reset Clock to Full Period"):
    reset_clock_to_full()

st.sidebar.markdown("---")
st.sidebar.subheader("Playbook")
st.session_state["new_play"] = st.sidebar.text_input("New Play Name", value=st.session_state["new_play"])

def add_play():
    raw = st.session_state["new_play"].strip()
    if not raw:
        return
    existing_lower = {p.lower() for p in st.session_state["plays"]}
    if raw.lower() in existing_lower:
        st.sidebar.warning("Play already exists.")
        return
    st.session_state["plays"].append(raw)
    st.session_state["new_play"] = ""

if st.sidebar.button("ADD NEW PLAY", use_container_width=True):
    add_play()

if st.session_state["plays"]:
    st.sidebar.caption("Current plays:")
    for p in st.session_state["plays"]:
        st.sidebar.write(f"â€¢ {p}")

st.sidebar.markdown("---")
if st.sidebar.button("Reset Game (clears log & selections)", type="secondary"):
    st.session_state["log"] = []
    st.session_state["selected_play"] = None
    st.success("Game state cleared.")

# Main Interface
st.title("StFx Mens Basketball Tagger")

if not ready_to_tag:
    st.warning("Select Opponent, Game Date, and Quarter in the sidebar to begin tagging.")
    st.stop()
else:
    st.write(f"**Game:** vs **{st.session_state['opponent']}** | **Date:** {st.session_state['game_date']} | **Quarter:** {st.session_state['quarter']}")

st.subheader("Assign Player")
if not ROSTER:
    st.error("No roster defined. Please edit the ROSTER list in the code.")
else:
    cols_per_row = 6
    rows = (len(ROSTER)
